{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LightHouse - A Configurable OIDFed Trust Anchor","text":"<p>LightHouse helps you to navigate the wild and complex sea of OpenID  Federation. Based on the go-oidfed implementation, LightHouse  provides an easy to use, flexible, and configurable Trust Anchor,  Intermediate Authority, Resolver, and / or Trust Mark Issuer. By deploying LightHouse to your federation, entities will know there now is  an Entity that will guide them and which they can put their trust in so they  can safely drop anchor.</p> <p>The LightHouse source code can  also be used  as a starting point to implement your own Trust Anchor based on the  go-oidfed library.</p> <p>However, the primary goal of lighthouse is to have an easy to set up  Federation Authority that can be configured according to your needs and  requirements.</p>"},{"location":"#read-more","title":"Read more","text":"<ul> <li> Configuration</li> <li> Features</li> <li> Endpoints</li> <li> Automatic Entity Checks</li> <li> Trust Marks</li> </ul>"},{"location":"config/","title":"Config","text":"<p>LightHouse is configured through a single configuration file named <code>config.yaml</code>.</p>"},{"location":"config/#config-file-location","title":"Config File Location","text":"<p>LightHouse will search for this file at startup at different locations, the  first file that is found will be used. Supported locations are:</p> <ul> <li><code>config.yaml</code></li> <li><code>config/config.yaml</code></li> <li><code>/config/config.yaml</code></li> <li><code>/lighthouse/config/config.yaml</code></li> <li><code>/lighthouse/config.yaml</code></li> <li><code>/data/config/config.yaml</code></li> <li><code>/data/config.yaml</code></li> <li><code>/etc/lighthouse/config.yaml</code></li> </ul>"},{"location":"config/#example-config-file","title":"Example Config File","text":"<p>The following is an example <code>config.yaml</code> file:</p> config.yaml <pre><code>server:\n    port: 7672\nsigning:\n    key_dir: \"/keys\"\nfederation_data:\n    entity_id: \"https://ta.example.lh\"\n    authority_hints:\n        - \"https://trust-anchor.spid-cie.fedservice.lh/\"\n    federation_entity_metadata:\n        display_name: \"Example Federation TA\"\n        organization_name: \"Example Organization\"\n    metadata_policy_file: \"/metadata-policy.json\"\n    trust_mark_issuers:\n        \"https://go-ia.federservice.lh/tm/federation-member\":\n            - \"https://go-ia.fedservice.lh\"\n    trust_marks:\n        - id: \"https://go-ia.federservice.lh/tm/federation-member\"\n          trust_mark: \"eyJhbGciOiJFUzUxMiIsImtpZCI6IlpsSFBmQXJTRnFGdjNHRlh3ZUptbmFkZDI4YTM4X3plcEJybEZkWHdIaTQiLCJ0eXAiOiJ0cnVzdC1tYXJrK2p3dCJ9.eyJleHAiOj...\"\n          refresh: true\n        - id: \"https://trust-anchor.federservice.lh/tm/federation-member\"\n          trust_mark: \"eyJhbGciOiJFUzUxMiIsImtpZCI6InpFLTlhVlhJanJZOUcxVU0tYURQVkxVR1RkWmFuOTk0NlJJUWhraWFjUVkiLCJ0eXAiOiJ0cnVzdC1tYXJrK2p3dCJ9.eyJleHAiO...\"\n          refresh: true\nstorage:\n    backend: json\n    data_dir: \"/data\"\nendpoints:\n    fetch:\n        path: \"/fetch\"\n    list:\n        path: \"/list\"\n    resolve:\n        path: \"/resolve\"\n    entity_collection:\n        path: \"/entity-collection\"\n        allowed_trust_anchors:\n            - https://ta.example.org\n        interval: 8h\n    trust_mark:\n        path: \"/trustmark\"\n        trust_mark_specs:\n            - trust_mark_type: \"https://tm.example.org\"\n              lifetime: 3600\n              ref: \"https://tm.example.org/ref\"\n              logo_uri: \"https://tm.example.org/logo\"\n              extra_claim: \"example\"\n              delegation_jwt:\n            - trust_mark_type: \"https://edugain.org\"\n              lifetime: 86400\n    trust_mark_status:\n        path: \"/trustmark/status\"\n    trust_mark_list:\n        path: \"/trustmark/list\"\n    enroll:\n        path: \"/enroll\"\n        checker:\n            type: multiple_or\n            config:\n                - type: trust_mark\n                  config:\n                      trust_mark_type: https://tm.example.org\n                      trust_anchors:\n                          - entity_id: https://ta.example.org\n                - type: trust_mark\n                  config:\n                      trust_mark_type: https://tm.example.com\n                      trust_anchors:\n                          - entity_id: https://example.com\n                          - entity_id: https://foo.bar.com\n</code></pre>"},{"location":"config/#configuration-sections","title":"Configuration Sections","text":"<ul> <li> Server</li> <li> Logging</li> <li> Storage</li> <li> Cache</li> <li> Signing</li> <li> Endpoints</li> <li> Federation Data</li> </ul>"},{"location":"config/#time-duration-configuration-options","title":"Time Duration Configuration Options","text":"<p>Some configuration option take a duration, e.g. the lifetime of entity  statements or the entity configuration.</p> <p>There are different options how to pass a duration in the config file:</p> <ul> <li>Number: If only a number is given, this is the number of seconds.</li> <li>String: The duration can also be given as a string which supports    different units.</li> </ul> <p>For a duration string the following units are supported and multiple units  can be used in a single string:</p> Symbol Unit Comment <code>y</code> Year = 365 days <code>w</code> Week = 7 days <code>d</code> Day = 24 hours <code>h</code> Hour <code>m</code> Minute <code>s</code> Second <code>ms</code> Millisecond SHOULD NOT be used <code>\u00b5s</code> Microsecond SHOULD NOT be used <code>ns</code> Nanosecond SHOULD NOT be used <p>Examples</p> <pre><code>1y\n2w6d\n20d\n1h30m\n</code></pre>"},{"location":"config/cache/","title":"Cache","text":"<p>Under the <code>cache</code> config option Lighthouse can be configured to use an external cache system. Currently, only Redis is supported (in additional to in-memory caching).</p>"},{"location":"config/cache/#redis_addr","title":"<code>redis_addr</code>","text":"<p>string optional</p> <p>The <code>redis_addr</code> option sets the address of a Redis server to be used as a cache backend. If set, Lighthouse initializes Redis caching at startup. If not set or empty, no external cache is used and in-memory defaults apply.</p> <p>Typical formats:</p> <ul> <li><code>hostname:port</code> (e.g. <code>localhost:6379</code>)</li> <li><code>ip:port</code> (e.g. <code>10.0.0.5:6379</code>)</li> </ul> config.yaml <pre><code>cache:\n  redis_addr: \"localhost:6379\"\n</code></pre>"},{"location":"config/endpoints/","title":"Endpoints","text":"<p>required, if LightHouse should do anything useful</p> <p>The <code>endpoints</code> config option is used to enable and configure the various endpoints that LightHouse supports. By  enabling endpoints LightHouse functionality is extended, i.e. LightHouse can serve different roles depending on the  enabled endpoints.</p>"},{"location":"config/endpoints/#fetch","title":"<code>fetch</code>","text":"<p>Under the <code>fetch</code> option the Federation Subordinate Fetching Endpoint is configured.</p> <p>This endpoint is required if LightHouse serves as a Trust Anchor and / or Intermediate Authority.</p> config.yaml <pre><code>endpoints:\n    fetch:\n        path: /fetch\n        statement_lifetime: 3600\n</code></pre>"},{"location":"config/endpoints/#path","title":"<code>path</code>","text":"<p>string required, unless <code>url</code> is given</p> <p>The <code>path</code> option is used to set the url path under which the Fetch Endpoint is available. Unless <code>url</code> is not set  the full external url will be <code>&lt;entity_id&gt;&lt;path&gt;</code>.</p> <p>If <code>path</code> is not set, LightHouse will not provide a Fetch Endpoint. To include an external Fetch Endpoint in the  Federation Metadata in the Entity Configuration set <code>url</code>. However, for the Fetch Endpoint it is unlikely that this  deployment scenario makes sense.</p>"},{"location":"config/endpoints/#url","title":"<code>url</code>","text":"<p>uri optional</p> <p>The <code>url</code> option is used to set the external url of the Fetch Endpoint that is published in the Federation Metadata  in the Entity Configuration. This option is usually not set. There are two cases where it might be set:</p> <ul> <li>To overwrite the default constructing of the external url from the provided <code>path</code>. This should usually not be needed.</li> <li>To use an external Endpoint.</li> </ul>"},{"location":"config/endpoints/#statement_lifetime","title":"<code>statement_lifetime</code>","text":"<p>duration 600000 seconds optional</p> <p>The <code>statement_lifetime</code> option sets the lifetime of the issued Entity Statements. The default is a bit less than one week.</p>"},{"location":"config/endpoints/#list","title":"<code>list</code>","text":"<p>Under the <code>list</code> option the Federation Subordinate Listing Endpoint is configured.</p> <p>This endpoint is required if LightHouse serves as a Trust Anchor and / or Intermediate Authority.</p> config.yaml <pre><code>endpoints:\n    list:\n        path: /list\n</code></pre>"},{"location":"config/endpoints/#path_1","title":"<code>path</code>","text":"<p>string required, unless <code>url</code> is given</p> <p>The <code>path</code> option is used to set the url path under which the Listing Endpoint is available. Unless <code>url</code> is not set the full external url will be <code>&lt;entity_id&gt;&lt;path&gt;</code>.</p> <p>If <code>path</code> is not set, LightHouse will not provide a Listing Endpoint. To include an external Listing Endpoint in the Federation Metadata in the Entity Configuration set <code>url</code>. However, for the Listing Endpoint it is unlikely that this deployment scenario makes sense.</p>"},{"location":"config/endpoints/#url_1","title":"<code>url</code>","text":"<p>uri optional</p> <p>The <code>url</code> option is used to set the external url of the Listing Endpoint that is published in the Federation Metadata in the Entity Configuration. This option is usually not set. There are two cases where it might be set:</p> <ul> <li>To overwrite the default constructing of the external url from the provided <code>path</code>. This should usually not be needed.</li> <li>To use an external Endpoint.</li> </ul>"},{"location":"config/endpoints/#resolve","title":"<code>resolve</code>","text":"<p>Under the <code>resolve</code> option the Resolve Endpoint is configured.</p> <p>This endpoint is generally optional. However, if LightHouse should serve as a Resolver it is obviously required.</p> config.yaml <pre><code>endpoints:\n    resolve:\n        path: /resolve\n        grace_period: 1h\n        time_elapsed_grace_factor: 0.75\n</code></pre>"},{"location":"config/endpoints/#path_2","title":"<code>path</code>","text":"<p>string required, unless <code>url</code> is given</p> <p>The <code>path</code> option is used to set the url path under which the Resolve Endpoint is available. Unless <code>url</code> is not set the full external url will be <code>&lt;entity_id&gt;&lt;path&gt;</code>.</p> <p>If <code>path</code> is not set, LightHouse will not provide a Resolve Endpoint. To include an external Resolve Endpoint in the Federation Metadata in the Entity Configuration set <code>url</code>.</p>"},{"location":"config/endpoints/#url_2","title":"<code>url</code>","text":"<p>uri optional</p> <p>The <code>url</code> option is used to set the external url of the Resolve Endpoint that is published in the Federation Metadata in the Entity Configuration. This option is usually not set. There are two cases where it might be set:</p> <ul> <li>To overwrite the default constructing of the external url from the provided <code>path</code>. This should usually not be needed.</li> <li>To use an external Endpoint.</li> </ul>"},{"location":"config/endpoints/#grace_period","title":"<code>grace_period</code>","text":"<p>duration 1 hour optional</p> <p>The <code>grace_period</code> option sets a Grace Period for the Resolver Cache. If a cached statement used by the resolver is not yet expired (on a request that needs it), but it will expire  within this grace period, the cached statement still will be used, but might be refreshed in the background (see  also the <code>time_elapsed_grace_factor</code> option). The grace period is given in seconds.</p>"},{"location":"config/endpoints/#time_elapsed_grace_factor","title":"<code>time_elapsed_grace_factor</code>","text":"<p>float 0.5 optional</p> <p>The <code>time_elapsed_grace_factor</code> option is used to further tweak the grace period behavior. A cached statement that expires within the grace period will only be refreshed if a certain amount of its lifetime  already has elapsed. How much time needs to already have elapsed is defined by this <code>time_elapsed_grace_factor</code>. </p> <p>Example</p> <p>If <code>grace_period</code> is set to <code>3600</code> statements that expire within one hour might be refreshed. If there would be  no <code>time_elapsed_grace_factor</code> (or it would be set to <code>0.0</code>) a statement that is only valid for an hour, would  always hit the grace period and would trigger a refresh even if it was only just fetched.</p> <p>With a <code>time_elapsed_grace_factor=0.75</code> LightHouse would only trigger a refresh if also 75% of the lifetime  (45mins in this case) have been passed.</p>"},{"location":"config/endpoints/#allowed_trust_anchors","title":"<code>allowed_trust_anchors</code>","text":"<p>list of strings optional; required if <code>proactive_resolver.enabled</code></p> <p>Defines which Trust Anchors are permitted on the resolver.</p> <p>When <code>proactive_resolver.enabled</code> is set, at least one <code>allowed_trust_anchors</code> entry must be configured (unless <code>use_entity_collection_allowed_trust_anchors</code> is <code>true</code>). Each value should be the Entity ID of a Trust Anchor.</p>"},{"location":"config/endpoints/#use_entity_collection_allowed_trust_anchors","title":"<code>use_entity_collection_allowed_trust_anchors</code>","text":"<p>boolean <code>false</code> optional</p> <p>If set to <code>true</code>, the resolver reuses the Trust Anchors configured under <code>entity_collection.allowed_trust_anchors</code>. This is useful when the same set of Trust Anchors is used for both periodic entity collection and proactive resolver refreshes.</p> <p>If <code>true</code>, you do not need to configure <code>resolve.allowed_trust_anchors</code> separately.</p>"},{"location":"config/endpoints/#proactive_resolver","title":"<code>proactive_resolver</code>","text":"<p>object / mapping optional</p> <p>Enables and configures a background resolver that proactively refreshes cached statements used for resolution.</p> <p>If enabled, the following requirements apply:</p> <ul> <li><code>entity_collection</code> must be enabled and <code>interval</code> must be set.</li> <li>Either <code>use_entity_collection_allowed_trust_anchors</code> is <code>true</code>, or   <code>allowed_trust_anchors</code> must list at least one Trust Anchor.</li> <li><code>response_storage.dir</code> must be set, and at least one of <code>store_json</code> or <code>store_jwt</code> must be <code>true</code>.</li> </ul> config.yaml <pre><code>endpoints:\n  entity_collection:\n    path: /entity-collection\n    allowed_trust_anchors:\n      - https://ta.example.com\n    interval: 8h\n  resolve:\n    path: /resolve\n    grace_period: 1h\n    use_entity_collection_allowed_trust_anchors: true\n    proactive_resolver:\n      enabled: true\n      concurrency_limit: 32\n      queue_size: 10000\n      response_storage:\n        dir: /var/lib/lighthouse/resolver\n        store_jwt: true\n</code></pre>"},{"location":"config/endpoints/#enabled","title":"<code>enabled</code>","text":"<p>boolean <code>false</code> optional</p> <p>Turns on the proactive resolver.</p>"},{"location":"config/endpoints/#concurrency_limit","title":"<code>concurrency_limit</code>","text":"<p>integer 64 optional</p> <p>Limits how many proactive refresh tasks may run in parallel.</p>"},{"location":"config/endpoints/#queue_size","title":"<code>queue_size</code>","text":"<p>integer 10000 optional</p> <p>Maximum size of the internal queue holding pending refresh jobs.</p>"},{"location":"config/endpoints/#response_storage","title":"<code>response_storage</code>","text":"<p>object / mapping required, if <code>proactive_resolver.enabled</code></p> <p>Configures how responses from the proactive resolver are persisted.</p>"},{"location":"config/endpoints/#dir","title":"<code>dir</code>","text":"<p>directory path required, if <code>proactive_resolver.enabled</code></p> <p>Directory where the resolver stores responses. Must be set when the proactive resolver is enabled.</p>"},{"location":"config/endpoints/#store_json","title":"<code>store_json</code>","text":"<p>boolean <code>false</code> optional</p> <p>Whether to store responses as parsed JSON.</p>"},{"location":"config/endpoints/#store_jwt","title":"<code>store_jwt</code>","text":"<p>boolean <code>true</code> optional</p> <p>Whether to store responses as pre-signed JWTs.</p>"},{"location":"config/endpoints/#trust_mark","title":"<code>trust_mark</code>","text":"<p>Under the <code>trust_mark</code> option the Federation Trust Mark Endpoint is configured.</p> <p>This endpoint is required if LightHouse serves as a Trust Mark Issuer.</p> config.yaml <pre><code>endpoints:\n    trust_mark:\n        path: /trustmark\n        trust_mark_specs:\n            - trust_mark_type: https://tm.example.org\n              lifetime: 1d\n              ref: https://tm.example.org/ref\n              logo_uri: https://tm.example.org/logo\n              extra_claim: foobar\n              delegation_jwt: ey...\n              checker:\n                  type: trust_path\n                  config:\n                      trust_anchors:\n                          - entity_id: https://ta.example.com\n</code></pre>"},{"location":"config/endpoints/#path_3","title":"<code>path</code>","text":"<p>string required, unless <code>url</code> is given</p> <p>The <code>path</code> option is used to set the url path under which the Trust Mark Endpoint is available. Unless <code>url</code> is not set the full external url will be <code>&lt;entity_id&gt;&lt;path&gt;</code>.</p> <p>If <code>path</code> is not set, LightHouse will not provide a Trust Mark Endpoint. To include an external Trust Mark Endpoint in the Federation Metadata in the Entity Configuration set <code>url</code>.</p>"},{"location":"config/endpoints/#url_3","title":"<code>url</code>","text":"<p>uri optional</p> <p>The <code>url</code> option is used to set the external url of the Trust Mark Endpoint that is published in the Federation Metadata in the Entity Configuration. This option is usually not set. There are two cases where it might be set:</p> <ul> <li>To overwrite the default constructing of the external url from the provided <code>path</code>. This should usually not be needed.</li> <li>To use an external Endpoint.</li> </ul>"},{"location":"config/endpoints/#trust_mark_specs","title":"<code>trust_mark_specs</code>","text":"<p>list required, if trust marks should be issued</p> <p>The <code>trust_mark_specs</code> option is used to configure which Trust Marks can be issued. Each list element has the following configuration options defined:</p>"},{"location":"config/endpoints/#trust_mark_type","title":"<code>trust_mark_type</code>","text":"<p>string required</p> <p>The <code>trust_mark_type</code> option sets the Trust Mark Type (ID) of the Trust Mark.</p>"},{"location":"config/endpoints/#lifetime","title":"<code>lifetime</code>","text":"<p>duration required, if the Trust Mark should expire</p> <p>The <code>lifetime</code> option is used to set the lifetime of each Trust Mark JWT.</p>"},{"location":"config/endpoints/#ref","title":"<code>ref</code>","text":"<p>uri optional</p> <p>The <code>ref</code> option is used to set the ref uri inside the Trust Mark JWT, as defined in the OpenID Federation  Specification.</p>"},{"location":"config/endpoints/#logo_uri","title":"<code>logo_uri</code>","text":"<p>uri optional</p> <p>The <code>logo_uri</code> option is used to set the logo uri inside the Trust Mark JWT, as defined in the OpenID Federation Specification.</p>"},{"location":"config/endpoints/#delegation_jwt","title":"<code>delegation_jwt</code>","text":"<p>string required, if delegation is used</p> <p>The <code>delegation_jwt</code> option is used to set the delegation JWT inside the Trust Mark JWT, as defined in the OpenID  Federation Specification. The delegation JWT is required if this LightHouse instance is not the Trust Mark Owner,  but issues Trust Marks on behalf of the owner.</p>"},{"location":"config/endpoints/#extra-claims","title":"Extra Claims","text":"<p>Additional claims can be provided. Any provided claim that is not defined here will also be added to the Trust Mark JWT.</p>"},{"location":"config/endpoints/#checker","title":"<code>checker</code>","text":"<p>object / mapping optional</p> <p>The <code>checker</code> option is used to configure Entity Checks that can be used to  dynamically issue Trust Marks to Entities. Check the Entity Checks documentation on  the configuration format. Also see Trust Marks for some more details on how Trust Mark  issuance works with LightHouse.</p>"},{"location":"config/endpoints/#trust_mark_request","title":"<code>trust_mark_request</code>","text":"<p>Under the <code>trust_mark_request</code> option a custom / proprietary endpoint can be configured. This endpoint allows an  Entity to request to be entitled for a certain Trust Mark. Our implementation of the Trust Mark Endpoint allows automatic checks; this endpoint can be used for manual checks,  with the following general flow:</p> <pre><code>flowchart TD\n    A[Entity requests Trust Mark via the Trust Mark Request endpoint]\n    B[Admin reviews the request]\n    C[No Trust Mark granted]\n    D[Entity is entitled to obtain Trust Mark]\n    E[Entity obtains Trust Mark from the Trust Mark endpoint]\n\n    A --&gt; B\n    B --&gt;|Decline| C\n    B --&gt;|Approve| D\n    D --&gt; E</code></pre> <p>A request to the Trust Mark Request endpoint is defined just as a request to the Trust Mark Endpoint.</p> <p>This endpoint is optional and only applicable if LightHouse serves as a Trust Mark Issuer.</p> config.yaml <pre><code>endpoints:\n    trust_mark_request:\n        path: /trustmark/request\n</code></pre>"},{"location":"config/endpoints/#path_4","title":"<code>path</code>","text":"<p>string required, unless <code>url</code> is given</p> <p>The <code>path</code> option is used to set the url path under which the Trust Mark Request Endpoint is available. Unless <code>url</code> is  not set the full external url will be <code>&lt;entity_id&gt;&lt;path&gt;</code>.</p> <p>If <code>path</code> is not set, LightHouse will not provide a Trust Mark Request Endpoint. To include an external Trust Mark  Request Endpoint in the Federation Metadata in the Entity Configuration set <code>url</code>.</p>"},{"location":"config/endpoints/#url_4","title":"<code>url</code>","text":"<p>uri optional</p> <p>The <code>url</code> option is used to set the external url of the Trust Mark Request Endpoint that is published in the Federation  Metadata in the Entity Configuration. This option is usually not set. There are two cases where it might be set:</p> <ul> <li>To overwrite the default constructing of the external url from the provided <code>path</code>. This should usually not be needed.</li> <li>To use an external Endpoint.</li> </ul>"},{"location":"config/endpoints/#trust_mark_status","title":"<code>trust_mark_status</code>","text":"<p>Under the <code>trust_mark_status</code> option the Federation Trust Mark Status Endpoint is configured.</p> <p>This endpoint is optional and only applicable if LightHouse serves as a Trust Mark Issuer.</p> <p> NYI</p> <p>The current implementation of the Trust Mark Status Endpoint is not yet updated to draft 43 - and therefore  works complelty differently.</p> config.yaml <pre><code>endpoints:\n    trust_mark_status:\n        path: /trustmark/status\n</code></pre>"},{"location":"config/endpoints/#path_5","title":"<code>path</code>","text":"<p>string required, unless <code>url</code> is given</p> <p>The <code>path</code> option is used to set the url path under which the Trust Mark Status Endpoint is available. Unless <code>url</code> is not set the full external url will be <code>&lt;entity_id&gt;&lt;path&gt;</code>.</p> <p>If <code>path</code> is not set, LightHouse will not provide a Trust Mark Status Endpoint. To include an external Trust Mark Status Endpoint in the Federation Metadata in the Entity Configuration set <code>url</code>.</p>"},{"location":"config/endpoints/#url_5","title":"<code>url</code>","text":"<p>uri optional</p> <p>The <code>url</code> option is used to set the external url of the Trust Mark Status Endpoint that is published in the Federation Metadata in the Entity Configuration. This option is usually not set. There are two cases where it might be set:</p> <ul> <li>To overwrite the default constructing of the external url from the provided <code>path</code>. This should usually not be needed.</li> <li>To use an external Endpoint.</li> </ul>"},{"location":"config/endpoints/#trust_mark_list","title":"<code>trust_mark_list</code>","text":"<p>Under the <code>trust_mark_list</code> option the Federation Trust Marked Entities Listing Endpoint is configured.</p> <p>This endpoint is optional and only applicable if LightHouse serves as a Trust Mark Issuer.</p> config.yaml <pre><code>endpoints:\n    trust_mark_list:\n        path: /trustmark/list\n</code></pre>"},{"location":"config/endpoints/#path_6","title":"<code>path</code>","text":"<p>string required, unless <code>url</code> is given</p> <p>The <code>path</code> option is used to set the url path under which the Trust Marked Entities Listing Endpoint is available.  Unless <code>url</code> is not set the full external url will be <code>&lt;entity_id&gt;&lt;path&gt;</code>.</p> <p>If <code>path</code> is not set, LightHouse will not provide a Trust Marked Entities Listing Endpoint. To include an external  Trust Marked Entities Listing Endpoint in the Federation Metadata in the Entity Configuration set <code>url</code>.</p>"},{"location":"config/endpoints/#url_6","title":"<code>url</code>","text":"<p>uri optional</p> <p>The <code>url</code> option is used to set the external url of the Trust Marked Entities Listing Endpoint that is published in the  Federation Metadata in the Entity Configuration. This option is usually not set. There are two cases where it might be set:</p> <ul> <li>To overwrite the default constructing of the external url from the provided <code>path</code>. This should usually not be needed.</li> <li>To use an external Endpoint.</li> </ul>"},{"location":"config/endpoints/#historical_keys","title":"<code>historical_keys</code>","text":"<p>Under the <code>historical_keys</code> option the Federation Historical Keys Endpoint is configured.</p> <p>This endpoint is optional.</p> config.yaml <pre><code>endpoints:\n    historical_keys:\n        path: /federation_historical_keys\n</code></pre>"},{"location":"config/endpoints/#path_7","title":"<code>path</code>","text":"<p>string required, unless <code>url</code> is given</p> <p>The <code>path</code> option is used to set the url path under which the Historical Keys Endpoint is available. Unless <code>url</code> is  not set the full external url will be <code>&lt;entity_id&gt;&lt;path&gt;</code>.</p> <p>If <code>path</code> is not set, LightHouse will not provide a Historical Keys Endpoint. To include an external Historical Keys  Endpoint in the Federation Metadata in the Entity Configuration set <code>url</code>.</p>"},{"location":"config/endpoints/#url_7","title":"<code>url</code>","text":"<p>uri optional</p> <p>The <code>url</code> option is used to set the external url of the Historical Keys Endpoint that is published in the Federation  Metadata in the Entity Configuration. This option is usually not set. There are two cases where it might be set:</p> <ul> <li>To overwrite the default constructing of the external url from the provided <code>path</code>. This should usually not be needed.</li> <li>To use an external Endpoint.</li> </ul>"},{"location":"config/endpoints/#enroll","title":"<code>enroll</code>","text":"<p>Under the <code>enroll</code> option a custom / proprietary endpoint can be configured. This endpoint allows an Entity to automatically be enrolled to the federation. This works by configured Entity Checks that an Entity must pass before it will be enrolled to the federation. See Enrolling Entities for more information about how to enroll  Entities and on how the request is defined.</p> <p>This endpoint is optional and only applicable if LightHouse serves as a Trust Anchor / Intermediate Authority.</p> config.yaml <pre><code>endpoints:\n    enroll:\n        path: /enroll\n        checker:\n            type: trust_path\n            config:\n                trust_anchors:\n                    - entity_id: https://ta.example.com\n</code></pre>"},{"location":"config/endpoints/#path_8","title":"<code>path</code>","text":"<p>string required, unless <code>url</code> is given</p> <p>The <code>path</code> option is used to set the url path under which the Enroll Endpoint is available. Unless <code>url</code> is not set the full external url will be <code>&lt;entity_id&gt;&lt;path&gt;</code>.</p> <p>If <code>path</code> is not set, LightHouse will not provide an Enroll Endpoint. To include an external Enroll Endpoint in the Federation Metadata in the Entity Configuration set <code>url</code>.</p>"},{"location":"config/endpoints/#url_8","title":"<code>url</code>","text":"<p>uri optional</p> <p>The <code>url</code> option is used to set the external url of the Enroll Endpoint that is published in the Federation Metadata in the Entity Configuration. This option is usually not set. There are two cases where it might be set:</p> <ul> <li>To overwrite the default constructing of the external url from the provided <code>path</code>. This should usually not be needed.</li> <li>To use an external Endpoint.</li> </ul>"},{"location":"config/endpoints/#checker_1","title":"<code>checker</code>","text":"<p>object / mapping optional</p> <p>The <code>checker</code> option is used to configure Entity Checks that can be used to decide  whether an Entity will be enrolled or not. Check the Entity Checks documentation on the configuration format.</p>"},{"location":"config/endpoints/#enroll_request","title":"<code>enroll_request</code>","text":"<p>Under the <code>enroll_request</code> option a custom / proprietary endpoint can be configured. This endpoint allows an Entity to request to be enrolled to the federation. Our (also proprietary)  Enrollment Endpoint allows automatic checks; this endpoint can be used  for manual checks, with the following general flow:</p> <pre><code>flowchart TD\n    A[Entity requests Enrollment via the Enroll Request endpoint]\n    B[Admin reviews the request]\n    C[Entity not enrolled]\n    D[Entity is enrolled]\n    E[Entity is included in Listing Endpoint response]\n    F[Entity is fetchable from the Fetch Endpoint]\n\n    A --&gt; B\n    B --&gt;|Decline| C\n    B --&gt;|Approve| D\n    D --&gt; E\n    D --&gt; F</code></pre> <p>A request to the Enroll Request endpoint is defined just as a request to the Enroll Endpoint.</p> <p>This endpoint is optional and only applicable if LightHouse serves as a Trust Anchor / Intermediate Authority.</p> config.yaml <pre><code>endpoints:\n    trust_mark_request:\n        path: /trustmark/request\n</code></pre>"},{"location":"config/endpoints/#path_9","title":"<code>path</code>","text":"<p>string required, unless <code>url</code> is given</p> <p>The <code>path</code> option is used to set the url path under which the Enroll Request Endpoint is available. Unless <code>url</code> is not set the full external url will be <code>&lt;entity_id&gt;&lt;path&gt;</code>.</p> <p>If <code>path</code> is not set, LightHouse will not provide a Enroll Request Endpoint. To include an external Enroll Request Endpoint in the Federation Metadata in the Entity Configuration set <code>url</code>.</p>"},{"location":"config/endpoints/#url_9","title":"<code>url</code>","text":"<p>uri optional</p> <p>The <code>url</code> option is used to set the external url of the Enroll Request Endpoint that is published in the Federation Metadata in the Entity Configuration. This option is usually not set. There are two cases where it might be set:</p> <ul> <li>To overwrite the default constructing of the external url from the provided <code>path</code>. This should usually not be needed.</li> <li>To use an external Endpoint.</li> </ul>"},{"location":"config/endpoints/#entity_collection","title":"<code>entity_collection</code>","text":"<p>Under the <code>entity_collection</code> option the Federation Entity Collection Endpoint is configured. This endpoint follows a  work-in-progress extension draft, currently available at: https://zachmann.github.io/openid-federation-entity-collection/main.html</p> <p>This endpoint is optional.</p> config.yaml <pre><code>endpoints:\n    entity_collection:\n        path: /entity-collection\n        allowed_trust_anchors:\n          - https://ta.example.com\n          - https://ta2.example.com\n        interval: 8h\n        concurrency_limit: 4\n        pagination_limit: 512\n</code></pre>"},{"location":"config/endpoints/#path_10","title":"<code>path</code>","text":"<p>string required, unless <code>url</code> is given</p> <p>The <code>path</code> option is used to set the url path under which the Entity Collection Endpoint is available. Unless <code>url</code> is  not set the full external url will be <code>&lt;entity_id&gt;&lt;path&gt;</code>.</p> <p>If <code>path</code> is not set, LightHouse will not provide an Entity Collection Endpoint. To include an external Entity  Collection Endpoint in the Federation Metadata in the Entity Configuration set <code>url</code>.</p>"},{"location":"config/endpoints/#url_10","title":"<code>url</code>","text":"<p>uri optional</p> <p>The <code>url</code> option is used to set the external url of the Entity Collection Endpoint that is published in the Federation  Metadata in the Entity Configuration. This option is usually not set. There are two cases where it might be set:</p> <ul> <li>To overwrite the default constructing of the external url from the provided <code>path</code>. This should usually not be needed.</li> <li>To use an external Endpoint.</li> </ul>"},{"location":"config/endpoints/#allowed_trust_anchors_1","title":"<code>allowed_trust_anchors</code>","text":"<p>list of strings required, if <code>interval</code> is set; otherwise optional</p> <p>The <code>allowed_trust_anchors</code> option restricts which Trust Anchors can be used in requests against the Entity Collection  Endpoint. If provided, a request's <code>trust_anchor</code> parameter must match one of the configured entries; otherwise the  endpoint responds with an error.</p> <p>If <code>interval</code> is configured (see below), at least one <code>allowed_trust_anchors</code> entry must be provided to define which  Trust Anchors are periodically collected.</p>"},{"location":"config/endpoints/#interval","title":"<code>interval</code>","text":"<p>duration optional</p> <p>The <code>interval</code> option enables periodic collection of entities from the configured Trust Anchors. When set, LightHouse  starts a background collector that collects entities for each Trust Anchor every <code>interval</code>.</p> <p>If <code>interval</code> is not set (default), the endpoint serves collection requests on demand without running a background collector.</p>"},{"location":"config/endpoints/#concurrency_limit_1","title":"<code>concurrency_limit</code>","text":"<p>integer optional</p> <p>The <code>concurrency_limit</code> option controls how many periodic collection tasks can run in parallel when <code>interval</code> is set.  If <code>interval</code> is not set, providing <code>concurrency_limit</code> has no effect and will be ignored (a warning is logged).</p>"},{"location":"config/endpoints/#pagination_limit","title":"<code>pagination_limit</code>","text":"<p>integer optional</p> <p>Enables pagination support for the Entity Collection Endpoint. When set to a positive integer, clients can use the <code>limit</code> and <code>from_entity_id</code> request parameters to page through results ordered by <code>entity_id</code>.</p> <p>The server enforces a maximum page size equal to the configured <code>pagination_limit</code>. When pagination is disabled (<code>pagination_limit</code> not set or <code>&lt;= 0</code>), requests including <code>limit</code> or <code>from_entity_id</code> are rejected with <code>unsupported_parameter</code> errors.</p> <p>Pagination can be enabled independently of <code>interval</code>; it applies to both on-demand collection and periodic collection.</p>"},{"location":"config/federation_data/","title":"Federation Data","text":"<p>required</p> <p>Under the <code>federation_data</code> option configuration related to OpenID Federation  is set.</p>"},{"location":"config/federation_data/#entity_id","title":"<code>entity_id</code>","text":"<p>uri required</p> <p>The <code>entity_id</code> option is used to set the Federation Entity ID.</p> config.yaml <pre><code>federation_data:\n    entity_id: https://lighthouse.example.com\n</code></pre>"},{"location":"config/federation_data/#trust_anchors","title":"<code>trust_anchors</code>","text":"<p>list optional</p> <p>The <code>trust_anchors</code> option is used to specify the Trust Anchors that should be used.</p> config.yaml <pre><code>federation_data:\n    trust_anchors:\n        - entity_id: https://ta.example.com\n        - entity_id: https://other-ta.example.org\n          jwks: {...}\n</code></pre> <p>For each list element the following options are defined:</p>"},{"location":"config/federation_data/#entity_id_1","title":"<code>entity_id</code>","text":"<p>uri required</p> <p>The <code>entity_id</code> of the Trust Anchor.</p>"},{"location":"config/federation_data/#jwks","title":"<code>jwks</code>","text":"<p>jwks recommended</p> <p>The <code>jwks</code> of the Trust Anchor that was obtained out-of-band. If omitted, it will be obtained from the Trust Anchor's Entity Configuration and implicitly trusted. In that case you are trusting TLS.</p> <p>Tip</p> <p>We recommend to provide the <code>jwks</code> as <code>json</code>. <code>json</code> is valid <code>yaml</code> and  can just be included. This way you can pass the whole <code>jwks</code> in a single  line.</p>"},{"location":"config/federation_data/#authority_hints","title":"<code>authority_hints</code>","text":"<p>list of uris required, unless there are no superiors</p> <p>The <code>authority_hints</code> option is used to specify the Entity IDs of Federation Entities that are direct superior to LightHouse and that issue a statement about LightHouse.</p> config.yaml <pre><code>federation_data:\n    authority_hints:\n        - https://ta.example.com\n</code></pre>"},{"location":"config/federation_data/#federation_entity_metadata","title":"<code>federation_entity_metadata</code>","text":"<p>object / mapping recommended</p> <p>The <code>federation_entity_metadata</code> option is used to set data that should be included in <code>metadata.federation_entity</code>  inside the Entity's Entity Configuration.</p> <p>The following options are available:</p>"},{"location":"config/federation_data/#display_name","title":"<code>display_name</code>","text":"<p>string recommended</p> <p>The <code>display_name</code> option sets the Display Name of this Entity to be included in the Federation Metadata.</p> config.yaml <pre><code>federation_data:\n    federation_entity_metadata:\n        display_name: Example Trust Anchor\n</code></pre>"},{"location":"config/federation_data/#description","title":"<code>description</code>","text":"<p>string optional</p> <p>The <code>description</code> option sets the Description of this Entity to be included in the Federation Metadata.</p> config.yaml <pre><code>federation_data:\n    federation_entity_metadata:\n        description: \"This is the Trust Anchor for the Example Federation.\"\n</code></pre>"},{"location":"config/federation_data/#keywords","title":"<code>keywords</code>","text":"<p>list of string optional</p> <p>The <code>keywords</code> option sets Keywords for this Entity that should be included in the Federation Metadata.</p> config.yaml <pre><code>federation_data:\n    federation_entity_metadata:\n        keywords:\n            - TA\n            - foo\n            - bar\n</code></pre>"},{"location":"config/federation_data/#contacts","title":"<code>contacts</code>","text":"<p>list of string optional</p> <p>The <code>contacts</code> option sets the Contacts of this Entity to be included in the Federation Metadata.</p> config.yaml <pre><code>federation_data:\n    federation_entity_metadata:\n        contacts:\n            - contact@example.com\n</code></pre>"},{"location":"config/federation_data/#logo_uri","title":"<code>logo_uri</code>","text":"<p>uri optional</p> <p>The <code>logo_uri</code> option sets the Logo URI of this Entity to be included in the Federation Metadata.</p> config.yaml <pre><code>federation_data:\n    federation_entity_metadata:\n        logo_uri: https://static.example.com/ta/logo.png\n</code></pre>"},{"location":"config/federation_data/#policy_uri","title":"<code>policy_uri</code>","text":"<p>uri optional</p> <p>The <code>policy_uri</code> option sets the Policy URI for this Entity to be included in the Federation Metadata.</p> config.yaml <pre><code>federation_data:\n    federation_entity_metadata:\n        policy_uri: https://ta.example.com/policy\n</code></pre>"},{"location":"config/federation_data/#information_uri","title":"<code>information_uri</code>","text":"<p>uri optional</p> <p>The <code>information_uri</code> option sets the Information URI for this Entity to be included in the Federation Metadata.</p> config.yaml <pre><code>federation_data:\n    federation_entity_metadata:\n        information_uri: https://ta.example.com/about\n</code></pre>"},{"location":"config/federation_data/#organization_name","title":"<code>organization_name</code>","text":"<p>string optional</p> <p>The <code>organization_name</code> option sets the Organization Name for this Entity to be included in the Federation Metadata.</p> config.yaml <pre><code>federation_data:\n    federation_entity_metadata:\n        organization_name: Example Organization\n</code></pre>"},{"location":"config/federation_data/#organization_uri","title":"<code>organization_uri</code>","text":"<p>uri optional</p> <p>The <code>organization_uri</code> option sets the Organization URI for this Entity to be included in the Federation Metadata.</p> config.yaml <pre><code>federation_data:\n    federation_entity_metadata:\n        organization_uri: https://example.com\n</code></pre>"},{"location":"config/federation_data/#extra","title":"<code>extra</code>","text":"<p>object / mapping optional</p> <p>The <code>extra</code> option is used to set additional data that should be included the Federation  Entity Metadata.</p> config.yaml <pre><code>federation_data:\n    federation_entity_metadata:\n        extra:\n            foo: bar\n            level: 2\n</code></pre>"},{"location":"config/federation_data/#metadata_policy_file","title":"<code>metadata_policy_file</code>","text":"<p>file path optional</p> <p>The <code>metadata_policy_file</code> option is used to set a metadata policy that is applicable to all subordinates. The  passed file must contain the Metadata Policy as json per OpenID Federation Specification.  It is optional to provide this option, but if provided the file must exist and contain valid Metadata Policy.</p> config.yaml <pre><code>federation_data:\n    metadata_policy_file: /path/to/metadata-policy.json\n</code></pre>"},{"location":"config/federation_data/#constraints","title":"<code>constraints</code>","text":"<p>object / mapping optional</p> <p>The <code>constraints</code> option is used to set the Constraints object that should be included in the Entity Configuration.  The configuration of this option is in line / analogous to how Constraints are defined in the OpenID Federation  Specification.</p> config.yaml <pre><code>federation_data:\n    constraints:\n        max_path_len: 2\n        naming_constraints:\n            permitted:\n                - .example.com\n            excluded:\n                - east.example.com\n        allowed_entity_types:\n            - openid_provider\n            - openid_relying_party\n</code></pre>"},{"location":"config/federation_data/#crit","title":"<code>crit</code>","text":"<p>list of strings optional</p> <p>The <code>crit</code> option is used to set which additional claims are critical as per OpenID Federation Specification.</p> config.yaml <pre><code>federation_data:\n    crit:\n        - foobar\n</code></pre>"},{"location":"config/federation_data/#metadata_policy_crit","title":"<code>metadata_policy_crit</code>","text":"<p>list of strings optional</p> <p>The <code>crit</code> option is used to set which additional metadata policy operators are critical as per OpenID Federation  Specification.</p> config.yaml <pre><code>federation_data:\n    metadata_policy_crit:\n        - remove\n</code></pre>"},{"location":"config/federation_data/#trust_marks","title":"<code>trust_marks</code>","text":"<p>list of trust mark configs optional</p> <p>The <code>trust_marks</code> option is used to set Trust Marks (about LightHouse) that should be published in the Entity Configuration.</p> config.yaml <pre><code>federation_data:\n    trust_marks:\n        - trust_mark_type: https://example.com/tm\n          trust_mark_issuer: https://example.com/tmi\n          refresh: true\n          min_lifetime: 300\n          refresh_grace_period: 7200\n</code></pre> <p>Each Trust Mark Config has the following options defined:</p>"},{"location":"config/federation_data/#trust_mark_type","title":"<code>trust_mark_type</code>","text":"<p>string required</p> <p>The <code>trust_mark_type</code> option sets the Identifier for the type of this Trust Mark.</p>"},{"location":"config/federation_data/#trust_mark_issuer","title":"<code>trust_mark_issuer</code>","text":"<p>uri required if <code>trust_mark_jwt</code> not given</p> <p>The <code>trust_mark_issuer</code> option is used to set the Entity ID of the Trust Mark Issuer of this Trust Mark.</p> <p>Either a Trust Mark JWT (<code>trust_mark_jwt</code>) must be given or the Trust Mark Issuer (<code>trust_mark_issuer</code>).</p> <p>If this option is given, <code>refresh</code> will be set to <code>true</code> and LightHouse will obtain Trust Mark JWTs for this Trust Mark Type dynamically.</p>"},{"location":"config/federation_data/#trust_mark_jwt","title":"<code>trust_mark_jwt</code>","text":"<p>string required if <code>trust_mark_issuer</code> not given</p> <p>The <code>trust_mark_jwt</code> option is used to set a Trust Mark JWT string. This will be published in the Entity Configuration. If the set Trust Mark JWT expires, it either must be manually updated before expiration, or automatic refreshing must be enabled through the <code>refresh</code> option.</p>"},{"location":"config/federation_data/#refresh","title":"<code>refresh</code>","text":"<p>boolean <code>false</code> optional</p> <p>The <code>refresh</code> option indicates if this Trust Mark should automatically be refreshed. If set to <code>true</code>, LightHouse will fetch a new Trust Mark JWT from the Trust Mark Issuer when the old one expires, assuring that always a valid Trust Mark JWT is published in the Entity Configuration.</p>"},{"location":"config/federation_data/#min_lifetime","title":"<code>min_lifetime</code>","text":"<p>duration 10 seconds optional</p> <p>The <code>min_lifetime</code> option is used to set a minimum lifetime in seconds on this Trust Mark. If <code>refresh</code> is set to <code>true</code> LightHouse will assure that the Trust Mark JWT published in the Entity Configuration will not expire before this lifetime whenever an Entity Configuration is requested.</p>"},{"location":"config/federation_data/#refresh_grace_period","title":"<code>refresh_grace_period</code>","text":"<p>duration 1 hour optional</p> <p>The <code>refresh_grace_period</code> option is used to set a grace period given in seconds. If <code>refresh</code> is set to <code>true</code>, LightHouse checks if the Trust Mark expires within the defined grace period, whenever its Entity Configuration is requested. If the Trust Mark expires within the grace period the old (but still valid) Trust Mark JWT will still be included in the Entity Configuration, but in parallel LightHouse will refresh it by requesting a new Trust Mark JWT from the Trust Mark Issuer.</p> <p>This allows LightHouse to proactively request Trust Mark JWTs that are expiring soon in the background.</p>"},{"location":"config/federation_data/#trust_mark_issuers","title":"<code>trust_mark_issuers</code>","text":"<p>object / mapping optional</p> <p>The <code>trust_mark_issuers</code> option is used to set the allowed trust mark issuers within this federation. The  configuration of this option is in line with the format in the OpenID Federation Specification.</p> config.yaml <pre><code>federation_data:\n    trust_mark_issuers:\n       \"https://openid.net/certification/op\": []\n        \"https://refeds.org/sirtfi\":\n            - https://example.org\n</code></pre>"},{"location":"config/federation_data/#trust_mark_owners","title":"<code>trust_mark_owners</code>","text":"<p>object / mapping optional</p> <p>The <code>trust_mark_owners</code> option is used to set the trust mark owners recognized within this federation. The configuration of this option is in line with the format in the OpenID Federation Specification.</p> config.yaml <pre><code>federation_data:\n    trust_mark_owners:\n        \"https://refeds.org/sirtfi\":\n            sub: https://refeds.org\n            jwks: {\"keys\":[{\"alg\":\"RS256\",\"e\":\"AQAB\",\"kid\":\"key1\",\"kty\":\"RSA\",\"n\":\"pnXBOusEANuug6ewezb9J_...\",\"use\":\"sig\"}]}\n</code></pre>"},{"location":"config/federation_data/#extra_entity_configuration_data","title":"<code>extra_entity_configuration_data</code>","text":"<p>object / mapping optional</p> <p>The <code>extra_entity_configuration_data</code> option is used to set additional data that should be included in the  Entity Configuration.</p> config.yaml <pre><code>federation_data:\n    extra_entity_configuration_data:\n        foo: bar\n        level: 2\n</code></pre>"},{"location":"config/federation_data/#configuration_lifetime","title":"<code>configuration_lifetime</code>","text":"<p>duration 1 day optional</p> <p>The <code>configuration_lifetime</code> option sets the lifetime of Entity Configurations, i.e. this options defines for how long  the Entity Configuration JWTs are valid.</p> config.yaml <pre><code>federation_data:\n    configuration_lifetime: 1w\n</code></pre> <p>`</p>"},{"location":"config/logging/","title":"Logging","text":"<p>Under the <code>logging</code> config option the logging behavior and locations can be  configured.</p>"},{"location":"config/logging/#access","title":"<code>access</code>","text":"<p>object recommended</p> <p>Under the <code>access</code> option the http access log can be configured.</p> config.yaml <pre><code>logging:\n    access:\n        dir: /var/log/lighthouse\n        stderr: true\n</code></pre> <p>The following options are available:</p>"},{"location":"config/logging/#dir","title":"<code>dir</code>","text":"<p>directory path optional</p> <p>The <code>dir</code> option is used to configure the directory where the log file  should be stored. If not set, LightHouse will not log to file.</p>"},{"location":"config/logging/#stderr","title":"<code>stderr</code>","text":"<p>boolean <code>false</code> optional</p> <p>The <code>stderr</code> option indicates if LightHouse logs to <code>stderr</code>.</p>"},{"location":"config/logging/#internal","title":"<code>internal</code>","text":"<p>The <code>internal</code> option is used to configure logging for LightHouse's internal  logging, i.e. logging related to what LightHouse does.</p> config.yaml <pre><code>logging:\n    internal:\n        dir: /var/log/lighthouse\n        stderr: true\n        level: info\n        smart:\n            enabled: true\n            dir: /var/log/lighthouse/errors\n</code></pre> <p>All configuration options from <code>access</code> also can be used with  <code>internal</code>. In additional the following options can be used:</p>"},{"location":"config/logging/#level","title":"<code>level</code>","text":"<p>enum info optional</p> <p>The <code>level</code> option sets the minimal log level that should be logged.</p> <p>Valid values are:</p> <ul> <li><code>trace</code></li> <li><code>debug</code></li> <li><code>info</code></li> <li><code>warn</code> / <code>warning</code></li> <li><code>error</code></li> <li><code>fatal</code></li> <li><code>panic</code></li> </ul>"},{"location":"config/logging/#smart","title":"<code>smart</code>","text":"<p>Under the <code>smart</code> option 'smart' logging can be enabled and configured.  Smart logging allows to have a higher (less verbose) log level set for  general (internal) logging without loosing valuable debug information in  case errors occure.</p> <p>If smart logging is enabled, the general logs are still done with the level  set through the <code>level</code> option, but if an error occurs a special  error log is created to a dedicated file. This dedicated error log contains  all log entries - including all log levels, also levels that normally woud  not be logged - for that particular request.</p>"},{"location":"config/logging/#enabled","title":"<code>enabled</code>","text":"<p>boolean <code>false</code> optional</p> <p>The <code>enabled</code> option is used to enable smart logging.</p>"},{"location":"config/logging/#dir_1","title":"<code>dir</code>","text":"<p>directory path same as the internal logging dir optional</p> <p>The <code>dir</code> option is used to specify the directory where smart error log  files should be stored. If not set and smart logging is enabled, smart error logs are placed in the  same directory as the regular internal log file.</p>"},{"location":"config/server/","title":"Server","text":"<p>Under the <code>server</code> config option the (http) server can be configured.</p>"},{"location":"config/server/#port","title":"<code>port</code>","text":"<p>integer 7672 optional</p> <p>The <code>port</code> config option is used to set the port at which LightHouse starts  the webserver and listens for incoming requests. Will only be used if <code>tls</code> is not used. If <code>tls</code> is enabled port <code>443</code> will be used (and optionally port <code>80</code>).</p> config.yaml <pre><code>server:\n    port: 4242\n</code></pre>"},{"location":"config/server/#tls","title":"<code>tls</code>","text":"<p>Under the <code>tls</code> config option settings related to <code>tls</code> can be configured. It is unlikely that one enables <code>tls</code> since a reverse proxy will be used in  most cases.</p> <p>If <code>tls</code> is enabled port <code>443</code> will be used.</p> config.yaml <pre><code>server:\n    tls:\n        enabled: true\n        redirect_http: true\n        cert: /path/to/cert\n        key: /path/to/key\n</code></pre>"},{"location":"config/server/#enabled","title":"<code>enabled</code>","text":"<p>boolean <code>true</code> optional</p> <p>If set to <code>false</code> <code>tls</code> will be disabled. Otherwise, it will automatically be  enabled, if <code>cert</code> and <code>key</code> are set.</p>"},{"location":"config/server/#redirect_http","title":"<code>redirect_http</code>","text":"<p>boolean <code>true</code> optional</p> <p>The <code>redirect_http</code> option determines if port <code>80</code> should be redirected to  port <code>443</code> or not.</p>"},{"location":"config/server/#cert","title":"<code>cert</code>","text":"<p>file path required for TLS</p> <p>The <code>cert</code> option is set to the tls <code>cert</code> file.</p>"},{"location":"config/server/#key","title":"<code>key</code>","text":"<p>file path required for TLS</p> <p>The <code>key</code> option is set to the tls <code>key</code> file.</p>"},{"location":"config/server/#trusted_proxies","title":"<code>trusted_proxies</code>","text":"<p>list of strings optional</p> <p>The <code>trusted_proxies</code> option is used to configure a list of trusted proxies by IP address or network range (CIDR notation).</p> <p>If LightHouse runs behind some sort of proxy, like a load  balancer, then certain header information may be sent to LightHouse using  special <code>X-Forwarded-*</code> headers or the Forwarded header. For example, to forward the client's real IP address.</p> <p>If set, such header information is only used when the request comes via one  of the trusted proxies. If unset, the information is always read from the  headers, which might be spoofed.</p> config.yaml <pre><code>server:\n    trusted_proxies:\n        - \"10.0.0.0/8\"\n        - \"172.16.0.0/12\"\n        - \"192.168.0.0/16\"\n        - \"fc00::/7\"\n</code></pre>"},{"location":"config/server/#forwarded_ip_header","title":"<code>forwarded_ip_header</code>","text":"<p>string <code>X-Forwarded-For</code> optional</p> <p>The <code>forwarded_ip_header</code> option specifies which HTTP header to use for getting the client's real IP address when behind a proxy.</p> config.yaml <pre><code>server:\n    forwarded_ip_header: X-Real-IP\n</code></pre>"},{"location":"config/signing/","title":"Signing","text":"<p>required</p> <p>Under the <code>signing</code> config option the signatures are configured.</p>"},{"location":"config/signing/#alg","title":"<code>alg</code>","text":"<p>enum ES512 optional</p> <p>The signing algorithm that is used.</p> <p>Supported values are:</p> <ul> <li><code>ES256</code></li> <li><code>ES384</code></li> <li><code>ES512</code></li> <li><code>EdDSA</code> (ed25519)</li> <li><code>RS256</code></li> <li><code>RS384</code></li> <li><code>RS512</code></li> <li><code>PS256</code></li> <li><code>PS384</code></li> <li><code>PS512</code></li> </ul> config.yaml <pre><code>signing:\n    alg: EdDSA\n</code></pre>"},{"location":"config/signing/#rsa_key_len","title":"<code>rsa_key_len</code>","text":"<p>integer 2048 optional</p> <p>The <code>rsa_key_len</code> option defines the length of the generated key, if an  RSA-based signing key is used and the key is generated by LightHouse because  it was not provided externally.</p> config.yaml <pre><code>signing:\n    alg: PS256\n    rsa_key_len: 4096\n</code></pre>"},{"location":"config/signing/#key_file","title":"<code>key_file</code>","text":"<p>Deprecated</p> <p>The <code>key_file</code> option is deprecated and must no longer be used. Instead <code>key_dir</code> is used. To keep the existing signing key place it in the <code>key_dir</code> directory (if not  already the case) and rename it to the following naming scheme: <code>federation_&lt;alg&gt;.pem</code>, e.g. <code>federation_ES512.pem</code></p>"},{"location":"config/signing/#key_dir","title":"<code>key_dir</code>","text":"<p>directory path required</p> <p>The <code>key_dir</code> option specifies the path to a directory that contains the private signing key(s), as well as a key set for public keys.</p> config.yaml <pre><code>signing:\n    key_dir: /path/to/keys\n</code></pre>"},{"location":"config/signing/#auto_generate_keys","title":"<code>auto_generate_keys</code>","text":"<p>boolean true optional</p> <p>When set to false, Lighthouse will not automatically generate a signing key at startup. If the required private key is not present in <code>key_dir</code>, Lighthouse will exit with an error instead of generating a new key. The expected filename is <code>federation_&lt;alg&gt;.pem</code>, for example <code>federation_ES512.pem</code>.</p> config.yaml <pre><code>signing:\n    key_dir: /path/to/keys\n    alg: ES512\n    auto_generate_keys: false\n</code></pre>"},{"location":"config/signing/#automatic_key_rollover","title":"<code>automatic_key_rollover</code>","text":"<p>object / mapping optional</p> <p>Under the <code>automatic_key_rollover</code> option key rollover / key rotation is configured.</p> config.yaml <pre><code>signing:\n    key_dir: /path/to/keys\n    automatic_key_rollover:\n        enabled: true\n        interval: 30d\n</code></pre>"},{"location":"config/signing/#enabled","title":"<code>enabled</code>","text":"<p>boolean <code>false</code> optional</p> <p>To enable automatic key rollover / rotation set <code>enabled</code> to true. If enabled, Lighthouse will automatically generate a new signing key when  needed (according to the configured interval). The current and next public  key are published in the entity configuration; this allows other entities to  already have the public key of the next signing key when it will be used.</p>"},{"location":"config/signing/#interval","title":"<code>interval</code>","text":"<p>duration 600000 seconds = ca. 1 week optional</p> <p>The <code>interval</code> option is used to set the interval at which keys should be  rotated, i.e. this defines the lifetime of a key. This cannot be smaller than the lifetime of the Entity Configuration. It  also should not be smaller than the lifetime of entity statements, trust  marks, or other JWTs signed with the federation entity key.</p>"},{"location":"config/signing/#old_keys_kept_in_jwks","title":"<code>old_keys_kept_in_jwks</code>","text":"<p>number 0 optional</p> <p>The <code>old_keys_kept_in_jwks</code> option sets a number of old keys that are still  published in the <code>jwks</code> in the entity configuration. This option should only  be changed when it is needed. Usually, it will not be required to publish  old keys here.</p>"},{"location":"config/storage/","title":"Storage","text":"<p>required</p> <p>The <code>storage</code> option is used to configure how and where data is stored.</p>"},{"location":"config/storage/#backend","title":"<code>backend</code>","text":"<p>enum badger recommended</p> <p>The <code>backend</code> option is used to set which storage backend should be used to store data. This defines how data is  stored. Depending on the chosen backend different further configuration options might be available or not.</p> <p>In the following the supported storage backend and their available options are detailed.</p>"},{"location":"config/storage/#json","title":"<code>json</code>","text":"<p>If <code>backend</code> is set to <code>json</code> the JSON files backend is used. This backend stores data in simple json files (in  multiple directories). This option is great to see which data is stored, since it is the most human-readable storage  format supported. It is also great if data is manipulated externally. Performance-wise other options are better.</p> config.yaml <pre><code>storage:\n    backend: json\n    data_dir: /path/to/data\n</code></pre> <p>The following configuration options are defined for the <code>json</code> backend:</p>"},{"location":"config/storage/#data_dir","title":"<code>data_dir</code>","text":"<p>directory path required</p> <p>The <code>data_dir</code> option sets the root directory where data is stored on disk. LightHouse creates subdirectories and  places the JSON files in those directories.</p>"},{"location":"config/storage/#badger","title":"<code>badger</code>","text":"<p>If <code>backend</code> is set to <code>badger</code> the BadgerDB backend is used. BadgerDB is  an embeddable, persistent key-value database. No external dependencies are needed, as BadgerDB is embedded into  LightHouse. The data is stored on disk is not suitable to be read or manipulated by humans.</p> config.yaml <pre><code>storage:\n    backend: badger\n    data_dir: /path/to/data\n</code></pre> <p>The following configuration options are defined for the <code>badger</code> backend:</p>"},{"location":"config/storage/#data_dir_1","title":"<code>data_dir</code>","text":"<p>directory path required</p> <p>The <code>data_dir</code> option sets the root directory where the badger data is stored on disk. </p>"},{"location":"deployment/caddy/","title":"Deployment","text":"<p>The following example configuration can be used (tweak as needed) to deploy  LightHouse using docker and Caddy:</p> <p>We assume the following project layout:</p> <pre><code>\ud83d\udcc1 caddy/\n\u251c\u2500\u2500 \ud83d\udcc4 Caddyfile #(1)!\n\u251c\u2500\u2500 \ud83d\udcc1 config/ \n\u2514\u2500\u2500 \ud83d\udcc1 data/\n\ud83d\udcc4 docker-compose.yaml #(2)!\n\ud83d\udcc1 lighthouse/\n\u251c\u2500\u2500 \ud83d\udcc4 config.yaml #(3)!\n\u2514\u2500\u2500 \ud83d\udcc1 data/\n    \u251c\u2500\u2500 \ud83d\udcc4 metadata-policy.json\n    \u251c\u2500\u2500 \ud83d\udcc1 storage/\n    \u2514\u2500\u2500 \ud83d\udcc1 signing/\n</code></pre> <ol> <li><code>caddy/CaddyFile</code></li> <li><code>docker-compose.yaml</code></li> <li><code>lighthouse/config.yaml</code></li> </ol> <code>docker-compose.yaml</code> <code>caddy/Caddyfile</code> <code>lighthouse/config.yaml</code> <pre><code>services:\n  caddy:\n    image: caddy:latest\n    restart: unless-stopped\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./caddy/Caddyfile:/etc/caddy/Caddyfile\n      - ./caddy/data:/data\n      - ./caddy/config:/config\n\n  lighthouse:\n    image: oidfed/lighthouse:main\n    restart: unless-stopped\n    volumes:\n      - ./lighthouse/config.yaml:/config.yaml:ro\n      - ./lighthouse/data:/data\n</code></pre> <pre><code>lighthouse.example.com {\n  reverse_proxy lighthouse:7672\n}\n</code></pre> <pre><code>server:\n    port: 7672\nsigning:\n    alg: ES256\n    key_dir: \"/data/signing\"\nfederation_data:\n    entity_id: \"https://lighthouse.example.com\"\n    federation_entity_metadata:\n        display_name: \"Example Federation TA\"\n        organization_name: \"Example Organization\"\n    metadata_policy_file: \"/data/metadata-policy.json\"\nstorage:\n    backend: badger\n    data_dir: \"/data/storage\"\nendpoints:\n    fetch:\n        path: \"/fetch\"\n    list:\n        path: \"/list\"\n    resolve:\n        path: \"/resolve\"\n    trust_mark:\n        path: \"/trustmark\"\n        trust_mark_specs:\n          - trust_mark_type: \"https://tm.example.org\"\n            lifetime: 3600\n            ref: \"https://tm.example.org/ref\"\n            logo_uri: \"https://tm.example.org/logo\"\n            checker:\n                type: trust_path\n                config:\n                    trust_anchors:\n                        - entity_id: \"https://lighthouse.example.com\"\n    trust_mark_list:\n        path: \"/trustmark/list\"\n</code></pre> <p>For more information about the lighthouse config file, please refer to  Configuration.</p>"},{"location":"features/","title":"Overview of Supported and Planned Features","text":"<ul> <li> Create and publish Entity Configuration                                </li> <li> Trust Chains<ul> <li> Collect and build Trust Chain</li> <li> Verify Trust Chains</li> <li> Evaluating Constraints</li> <li> Resolve Metadata<ul> <li> Applying Metadata Policies  </li> <li> Applying Metadata from Superiors  </li> <li> Support for Custom Metadata Policy Operators </li> </ul> </li> <li> Resolve Endpoint</li> </ul> </li> <li> Configure Trust<ul> <li> Configure Trust Anchors  </li> <li> Set Authority Hints     </li> </ul> </li> <li> Endpoints<ul> <li> Subordinate Listing Endpoint</li> <li> Fetching Endpoint</li> <li> Resolve Endpoint</li> <li> Trust Mark Endpoint</li> <li> Trust Marked Entities Listing Endpoint                                </li> <li> Trust Mark Status Endpoint   </li> <li> Federation Historical Keys Endpoint</li> <li> Endpoint to automatically enroll entities</li> <li> Endpoint to request enrollment</li> <li> Endpoint to request to be entitled for a trust mark</li> <li> Entity Collection Endpoint</li> </ul> </li> <li> Trust Marks<ul> <li> Issuance of Trust Marks</li> <li> Support for Trust Mark Delegation                               </li> <li> Trust Mark JWT Verification for non-delegated Trust Marks           </li> <li> Trust Mark JWT Verification for Trust Marks using delegation</li> <li> Trust Mark Verification using the Trust Mark Status Endpoint       </li> </ul> </li> <li> JWT Type Verification   </li> <li> Endpoints supporting GET requests</li> <li> Endpoints supporting POST requests</li> <li> Endpoints supporting Client Authentication   </li> <li> Automatic Key Rollover                      </li> <li> Entity Checks<ul> <li> Automatic, configurable Checks for Enrollment                        </li> <li> Automatic, configurable Checks for Trust Mark Issuance  </li> </ul> </li> <li> Automatically refresh trust marks in Entity Configuration  </li> <li> Support for multiple signing keys</li> </ul>"},{"location":"features/endpoints/","title":"Endpoints","text":"<p>The following endpoints are available:</p> Endpoint Config Parameter Description Federation Config n/a Always enabled. The federation endpoint where the entity configuration is published. Fetch <code>fetch</code> Federation Subordinate Fetch Endpoint per Spec Section 8.1 Subordinate Listing <code>list</code> Federation Subordinate Listing Endpoint per Spec Section 8.2 Resolve <code>resolve</code> Resolve Endpoint per Spec Section 8.3 Trust Mark Status <code>trust_mark_status</code> Trust Mark Status Endpoint per Spec Section 8.4 Trust Marked Entities Listing <code>trust_mark_listing</code> Trust Marked Entities Listing Endpoint per Spec Section 8.5 Trust Mark <code>trust_mark</code> Trust Mark Endpoint per Spec Section 8.6 Federation Historical Keys <code>historical_keys</code> Historical Keys Endpoint per Spec Section 8.7; only usable with automatic key rollover Enrollment <code>enroll</code> An endpoint where entities can automatically enroll into the federation. For details see #enrolling-entities Request Enrollment <code>enroll_request</code> An endpoint where entities can request enrollment into the federation. An federation administrator then can check and approve the request. The request is analog to the enroll request Trust Mark Request <code>trust_mark_request</code> An endpoint where entities can request to be entitled for a trust mark. A federation administrator then can check and approve the request. The request is analog to the trust mark request Entity Collection <code>entity_collection</code> An endpoint to query a filterable list of all entities in a federation. Per Entity Collection Endpoint Extension Draft"},{"location":"features/endpoints/#enrolling-entities","title":"Enrolling Entities","text":"<p>LightHouse implements a custom enrollment / onboarding endpoint which can be  configured in the config file. This endpoint is used to easily add entities to the federation. Entities can also be manually added to the database (or with a simple command line application).</p> <p>The enrollment endpoint can also be guarded by so-called Entity Checks. If the enroll endpoint is enabled, but no checks defined, all entities can  enroll (obviously not recommended outside a proof-of-concept).</p>"},{"location":"features/endpoints/#enrollment-request","title":"Enrollment Request","text":"<p>To enroll, the entity sends a <code>GET</code> request to the enroll endpoint with the  following request parameter:</p> Parameter Necessity Description <code>sub</code> REQUIRED Its entity id <code>entity_type</code> RECOMMENDED Its entity type <p><code>entity_type</code> can be provided multiple times to pass multiple entity types.</p> <p>LightHouse will query the entity's federation endpoint for its Entity  Configuration and obtain the jwks from there and (if configured) performs the entity checks.</p>"},{"location":"features/entity_checks/","title":"Entity Checks","text":"<p>With the Entity Checks mechanism checks on an entity can be defined.  One can define their own Entity Checks by implementing the <code>EntityChecker</code>  interface and registering it through the <code>RegisterEntityChecker</code> function before loading the config file. </p> <p>The following Entity Checks are already implemented and supported out of the  box by LightHouse: - <code>none</code>: Always forbids access - <code>trust_mark</code>: Checks if the entity advertises a Trust Mark and verifies that it is valid - <code>trust_path</code>: Checks if there is a valid trust path from the entity to the defined Trust Anchor - <code>authority_hints</code>: Checks if the entity's published   <code>authority_hints</code> contain the defined Entity ID - <code>entity_id</code>: Checks if the entity's <code>entity_id</code> is one of the    defined ones - <code>multiple_and</code>: Used to combine multiple <code>EntityChecker</code>    using AND - <code>multiple_or</code>: Used to combine multiple <code>EntityChecker</code>    using OR</p> <p>In the following we describe in more details how to configure the different Entity Checkers:</p>"},{"location":"features/entity_checks/#none","title":"None","text":"<p>No additional configuration applicable.</p> <p>Example</p> <pre><code>checker:\n  type: none\n</code></pre>"},{"location":"features/entity_checks/#trust-mark","title":"Trust Mark","text":"<p>For a Trust Mark Entity Checker one must configure the Trust Mark Type of the Trust Mark that should be checked. Additionally, one must provide either Trust Anchors or the Trust Mark Issuer's jwks and in the case of delegation information about the Trust Mark Owner.</p>"},{"location":"features/entity_checks/#config-parameters","title":"Config Parameters","text":"Claim Necessity Description <code>trust_mark_type</code> REQUIRED The Trust Mark Type of the Trust Mark to check <code>trust_anchors</code> REQUIRED unless <code>trust_mark_issuer_jwks</code> is given A list of Trust Anchors used to verify the Trust Mark issuer <code>trust_mark_issuer_jwks</code> REQUIRED if <code>trust_anchors</code> is not given The jwks of the Trust Mark Issuer <code>trust_mark_owner</code> REQUIRED if <code>trust_anchors</code> is not given and delegation is used Information about the Trust Mark Owner <p>The <code>trust_anchors</code> claim is a list where each element can have the following parameters:</p> Claim Necessity Description <code>entity_id</code> REQUIRED The Entity ID of the Trust Anchor <code>jwks</code> OPTIONAL The Trust Anchor's jwks; if omitted it is obtained from its Entity Configuration <p>The <code>trust_mark_owner</code> claim has the following parameters:</p> Claim Necessity Description <code>entity_id</code> REQUIRED The Entity ID of the Trust Mark Owner <code>jwks</code> REQUIRED The Trust Mark Owner's jwks"},{"location":"features/entity_checks/#examples","title":"Examples","text":"Using Trust Anchor Using Trust Mark Issuer JWKS Using Trust Mark Issuer JWKS and delegation <pre><code>checker:\n  type: trust_mark\n  config:\n    trust_mark_type: https://tm.example.org\n    trust_anchors:\n      - entity_id: https://ta.example.org\n</code></pre> <pre><code>checker:\n  type: trust_mark\n  config:\n    trust_mark_type: https://tm.example.org\n    trust_mark_issuer_jwks: {\"keys\":[{\"alg\":\"ES512\",\"crv\":\"P-521\",\"kid\":\"E6XirVKtuO2_76Ly8Lw1cS_W4FUfw_lx5M_z33aMO-I\",\"kty\":\"EC\",\"use\":\"sig\",\"x\":\"AbZpRmHJVpqqJ2q4bFMPto5jVhReNe0toBHWm0y-AhdpqYIqLA-J3ICr_I42BgmC4pG9lQE4qU8mJjkX1I__PDK8\",\"y\":\"AFl9aVDzsUJPbyxDe96FuLWJNYNOo68WcljWEXJ0QzsFaTDUtykNe1lf3UoOXQWnvNQ1eD2iyWTef1gRR9A6HOSI\"}]}\n</code></pre> <pre><code>checker:\n  type: trust_mark\n  config:\n    trust_mark_type: https://tm.example.org\n    trust_mark_issuer_jwks: {\"keys\":[{\"alg\":\"ES512\",\"crv\":\"P-521\",\"kid\":\"E6XirVKtuO2_76Ly8Lw1cS_W4FUfw_lx5M_z33aMO-I\",\"kty\":\"EC\",\"use\":\"sig\",\"x\":\"AbZpRmHJVpqqJ2q4bFMPto5jVhReNe0toBHWm0y-AhdpqYIqLA-J3ICr_I42BgmC4pG9lQE4qU8mJjkX1I__PDK8\",\"y\":\"AFl9aVDzsUJPbyxDe96FuLWJNYNOo68WcljWEXJ0QzsFaTDUtykNe1lf3UoOXQWnvNQ1eD2iyWTef1gRR9A6HOSI\"}]}\n    trust_mark_owner:\n      entity_id: https://ta.example.org\n      jwks: {\"keys\":[{\"alg\":\"ES512\",\"crv\":\"P-521\",\"kid\":\"gChx94HqIDTscqMzxDps6degt2j_Z7OrDsx0Fc24rKA\",\"kty\":\"EC\",\"use\":\"sig\",\"x\":\"AAyVRMA84JsAtJ9z3qKVzgBN1DL8lDIrHRRYtnYiSkfe-i0V7W21QJ_VBBRF3kWFEYadRL9z4yJC7gYvsojF6p8C\",\"y\":\"AYx1JCtCfrvNR8x8KibI2mQJKAsszjslfd8WlTha8lxtvncpg5c-UxjJgpCYRo3jwdvxUCa6LKHu0TzbUhKfFK8f\"}]}\n</code></pre>"},{"location":"features/entity_checks/#trust-path","title":"Trust Path","text":"<p>For a trust path Entity Checker one must configure the Trust Anchors that should be used to verify that there is an existing trust path to one of these Trust Anchors.</p>"},{"location":"features/entity_checks/#config-parameters_1","title":"Config Parameters","text":"Claim Necessity Description <code>trust_anchors</code> REQUIRED A list of Trust Anchors used to verify the trust path <p>The <code>trust_anchors</code> claim is a list where each element can have the following parameters:</p> Claim Necessity Description <code>entity_id</code> REQUIRED The Entity ID of the Trust Anchor <code>jwks</code> OPTIONAL The Trust Anchors jwks; if omitted it is obtained from its Entity Configuration"},{"location":"features/entity_checks/#example","title":"Example","text":"<p>Example</p> <pre><code>checker:\n  type: trust_path\n  config:\n    trust_anchors:\n      - entity_id: https://ta.example.org\n</code></pre>"},{"location":"features/entity_checks/#authority-hints","title":"Authority Hints","text":"<p>For an Authority Hints Entity Checker one must configure the Entity ID that should be present in the authority hints.</p>"},{"location":"features/entity_checks/#config-parameters_2","title":"Config Parameters","text":"Claim Necessity Description <code>entity_id</code> REQUIRED The Entity ID that should be present in the entity's authority hints"},{"location":"features/entity_checks/#example_1","title":"Example","text":"<p>Example</p> <pre><code>checker:\n  type: authority_hints\n  config:\n    entity_id: https://ia.example.org\n</code></pre>"},{"location":"features/entity_checks/#entity-ids","title":"Entity IDs","text":"<p>For an Entity ID Entity Checker one must configure the Entity ID(s) that are allowed.</p>"},{"location":"features/entity_checks/#config-parameters_3","title":"Config Parameters","text":"Claim Necessity Description <code>entity_ids</code> REQUIRED A list of allowed Entity IDs"},{"location":"features/entity_checks/#example_2","title":"Example","text":"<p>Example</p> <pre><code>checker:\n  type: entity_id\n  config:\n    entity_ids: \n      - https://op1.example.org\n      - https://op2.example.org\n</code></pre>"},{"location":"features/entity_checks/#multiple","title":"Multiple","text":"<p>To combine multiple Entity Checkers (either with AND or OR) one must provide all Entity Checkers:</p> <p>Nested Example</p> <pre><code>checker:\n  type: multiple_and\n  config:\n    - type: trust_path\n      config:\n        trust_anchors:\n          - entity_id: https://ta.example.org\n    - type: multiple_or\n      config:\n        - type: trust_mark\n          config: \n            trust_mark_type: https://tm.example.com\n            trust_anchors:\n              - entity_id: https://ta.example.com\n        - type: trust_mark\n          config: \n            trust_mark_type: https://tm.example.org\n            trust_anchors:\n              - entity_id: https://ta.example.org\n</code></pre>"},{"location":"features/trustmarks/","title":"Trustmarks","text":""},{"location":"features/trustmarks/#trust-mark-issuance","title":"Trust Mark Issuance","text":"<p>The issuance of Trust Marks boils down to \"if you are on the list of entities that can obtain this Trust Mark, we will issue the Trust Mark\". Therefore, our Trust Mark Issuer implementation manages for each Trust Mark a  list of entities that can obtain this Trust Mark.</p> <p>It is possible to use the Entity Checks mechanism to dynamically add entities to that list. I.e. any <code>EntityChecker</code> can be used on the Trust Mark endpoint, resulting in the following behavior of the Trust Mark Issuer:</p> <pre><code>graph TD\n    A[Trust Mark Request] --&gt; B{Subject&lt;br&gt;already&lt;br&gt;in the list?};\n    B --&gt; |Yes| C[Trust Mark Issued];\n    B --&gt; |No| D{Entity Checks&lt;br&gt;defined?};\n    D --&gt; |No| E[No Trust Mark Issued];\n    D --&gt; |Yes| F{Evaluate&lt;br&gt;Checks};\n    F --&gt; |Negative| E;\n    F --&gt; |Positive| G[Add Subject to list];\n    G --&gt; C;</code></pre>"}]}